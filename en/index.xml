<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents for Coost</title>
    <link>https://coostdocs.github.io/en/</link>
    <description>Recent content on Documents for Coost</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://coostdocs.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic definitions</title>
      <link>https://coostdocs.github.io/en/co/def/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/def/</guid>
      <description>include: co/def.h.
#typedefs #Fixed-length integer type def.h defines the following 8 types of integers:
typedef int8_t int8; typedef int16_t int16; typedef int32_t int32; typedef int64_t int64; typedef uint8_t uint8; typedef uint16_t uint16; typedef uint32_t uint32; typedef uint64_t uint64; These types have the same length on different platforms, and there is no portability problem. Google Code Style recommends not to use built-in integer types such as short, long, long long, etc.</description>
    </item>
    
    <item>
      <title>defer</title>
      <link>https://coostdocs.github.io/en/co/defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/defer/</guid>
      <description>include: co/defer.h.
#defer defer is a macro provided by CO, which is similar to defer in golang.
#include &amp;#34;co/defer.h&amp;#34; #include &amp;#34;co/time.h&amp;#34; #include &amp;#34;co/log.h&amp;#34; #include &amp;#34;co/json.h&amp;#34; void f(const Json&amp;amp; req, Json&amp;amp; res) { Timer t; LOG &amp;lt;&amp;lt; &amp;#34;req: &amp;#34; &amp;lt;&amp;lt; req; defer(LOG &amp;lt;&amp;lt; &amp;#34;res: &amp;#34; &amp;lt;&amp;lt; res &amp;lt;&amp;lt; &amp;#34;, time elapse: &amp;#34; &amp;lt;&amp;lt; t.us() &amp;lt;&amp;lt; &amp;#34;us&amp;#34;); // do something here } In the above example, the code in defer will be executed at the end of the function f, thus printing the output and time elapse of the function.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://coostdocs.github.io/en/about/co/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/about/co/</guid>
      <description>#What is coost coost is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.
The original name of coost is co or cocoyaxi. It is like boost, but more lightweight, the static library built on linux or mac is only about 1MB in size. However, it still provides enough powerful features:
Command line and config file parser (flag) High performance log library (log) Unit testing framework go-style coroutine Coroutine-based network library Efficient JSON library JSON RPC framework Atomic operation (atomic) Efficient stream (fastream) Efficient string (fastring) String utility (str) Time library (time) Thread library (thread) Timed Task Scheduler God-oriented programming LruMap hash library path library File utilities (fs) System operations (os) Fast memory allocator #History of coost 2013-2015, Alvin(idealvin) felt a little cumbersome when using google&amp;rsquo;s gflags, glog, gtest, etc.</description>
    </item>
    
    <item>
      <title>Atomic Operations</title>
      <link>https://coostdocs.github.io/en/co/atomic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/atomic/</guid>
      <description>include: co/atomic.h.
#Memory Order Since v3.0, co has added a support for memory order. The six memory orders in co are defined as follows:
enum memory_order_t { mo_relaxed, mo_consume, mo_acquire, mo_release, mo_acq_rel, mo_seq_cst, }; The default memory order of atomic operations in co is mo_seq_cst.
#APIs removed since v3.0 atomic_get, use atomic_load instead. atomic_set, use atomic_store instead. atomic_reset, use atomic_store(&amp;amp;x, 0) instead. #load &amp;amp; store #atomic_load template&amp;lt;typename T&amp;gt; inline T atomic_load(const T* p, memory_order_t mo = mo_seq_cst); This function gets the value of the variable pointed to by p, T is any built-in type (including pointer type) with a length of 1, 2, 4, 8 bytes.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://coostdocs.github.io/en/about/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/about/contact/</guid>
      <description>Contact
Email: idealvin at qq.com github: https://github.com/idealvin/coost gitee: https://gitee.com/idealvin/coost zhihu: idealvin </description>
    </item>
    
    <item>
      <title>fastring</title>
      <link>https://coostdocs.github.io/en/co/fastring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/fastring/</guid>
      <description>include: co/fastring.h.
#fastring fastring is the string type in co. It implements most of the methods in std::string and also provides some methods that std::string does not support.
#fastring::fastring 1. fastring() noexcept; 2. explicit fastring(size_t cap); 3. fastring(const void* s, size_t n); 4. fastring(const char* s); 5. fastring(const std::string&amp;amp; s); 6. fastring(size_t n, char c); 7. fastring(char c, size_t n); 8. fastring(const fastring&amp;amp; s); 9. fastring(fastring&amp;amp;&amp;amp; s) noexcept; The first is the default constructor, which creates an empty fastring without allocating any memory.</description>
    </item>
    
    <item>
      <title>fastream</title>
      <link>https://coostdocs.github.io/en/co/fastream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/fastream/</guid>
      <description>include: co/fastream.h.
#fastream fastream is used to replace std::ostringstream in the C++ standard library. The performance of std::ostringstream is poor which may be several times slower than snprintf, and fastream is about 10~30 times faster than snprintf on different platforms.
#fastream::fastream fastream() noexcept; explicit fastream(size_t cap); fastream(fastream&amp;amp;&amp;amp; s) noexcept; The first one is the default constructor, which creates an empty fastream object without any memory allocation.
The second constructor uses the parameter cap to specify the initial capacity of fastream.</description>
    </item>
    
    <item>
      <title>SponsorðŸ’•</title>
      <link>https://coostdocs.github.io/en/about/sponsor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/about/sponsor/</guid>
      <description>#Sponsor coost is a personal project. If you are interested in sponsoring it, you may contact with Alvin (idealvin at qq.com), we&amp;rsquo;ll display your logo, website and other information here, and also provide you with better technical services. Thank you very much.
#Coffee If you like coost, you may also buy the author a cup of coffee, thanks.
Paypal
idealvin@qq.com
Wechat &amp;amp; Alipay
Github Sponsor</description>
    </item>
    
    <item>
      <title>String utilities</title>
      <link>https://coostdocs.github.io/en/co/str/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/str/</guid>
      <description>include: co/str.h.
#split, strip, replace, #str::split co::vector&amp;lt;fastring&amp;gt; split(const char* s, char c, uint32 n=0); co::vector&amp;lt;fastring&amp;gt; split(const fastring&amp;amp; s, char c, uint32 n=0); co::vector&amp;lt;fastring&amp;gt; split(const char* s, const char* c, uint32 n=0); co::vector&amp;lt;fastring&amp;gt; split(const fastring&amp;amp; s, const char* c, uint32 n=0); This function splits the string into several substrings, the original string remains unchanged, and returns the split result.
Parameter s is a C string or fastring, parameter c is the separator, parameter n is the maximum number of splits, 0 or -1 means unlimited.</description>
    </item>
    
    <item>
      <title>co/flag</title>
      <link>https://coostdocs.github.io/en/co/flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/flag/</guid>
      <description>include: co/flag.h.
#Basic concepts co/flag is a command line and config file parsing library similar to google gflags. Its principle is very simple, define global variables in code, then parse the command line parameters or config file when the program starts, and update the value of these global variables.
#flag variable The global variable defined by macros in co/flag are called flag variable. For example, the following code defines a flag variable, the variable name is FLG_x.</description>
    </item>
    
    <item>
      <title>co/log</title>
      <link>https://coostdocs.github.io/en/co/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/log/</guid>
      <description>include: co/log.h.
#Introduction co/log is a C++ streaming log library similar to google glog, which prints logs like this:
LOG &amp;lt;&amp;lt; &amp;#34;hello world&amp;#34; &amp;lt;&amp;lt; 23; // level log TLOG(&amp;#34;topic&amp;#34;) &amp;lt;&amp;lt; &amp;#34;hello&amp;#34; &amp;lt;&amp;lt; 23; // topic log co/log supports two types of logs, level log and topic log (TLOG).
#Level Log Level log is divided into 5 levels: debug, info, warning, error, fatal, and provides a series of macros to print logs of different levels.</description>
    </item>
    
    <item>
      <title>Unitest</title>
      <link>https://coostdocs.github.io/en/co/unitest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/unitest/</guid>
      <description>include: co/unitest.h.
#Basic concepts co/unitest is a unit testing framework, similar to google gtest, but easier to use.
#Test Units and Test Cases A test program can be divided into multiple test units according to functions or modules, and there can be multiple test cases under each test unit. For example, a test unit can be defined for a class (or module) in C++, and a test case can be defined for each method in the class (or module).</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://coostdocs.github.io/en/co/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/json/</guid>
      <description>include: co/json.h.
co/json is a JSON library similar to rapidjson. Compared with rapidjson, it has better performance and is easier to use.
#Basic concepts JSON is a simple data format that supports two data structures:
A collection consisting of a series of key/value pairs. This type of structure is called object, which corresponds to struct, map, etc, in programming languages. A list composed of a series of value, this kind of structure is called array, which corresponds to vector, list, etc, in programming languages.</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>https://coostdocs.github.io/en/co/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/time/</guid>
      <description>include: co/time.h.
#epoch time The EPOCH is a specific time 1970-01-01 00:00:00 UTC, and the epoch time is the time since the EPOCH.
#epoch::ms int64 ms(); Return milliseconds since EPOCH. #epoch::us int64 us(); Return microseconds since EPOCH. #monotonic time Monotonic time is a monotonic increasing time, it is implemented as the time since last reboot of system on most platforms . It is generally used for timing and is more stable than system time.</description>
    </item>
    
    <item>
      <title>Thread</title>
      <link>https://coostdocs.github.io/en/co/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/thread/</guid>
      <description>include: co/thread.h.
#Thread The Thread class is an encapsulation of the thread. When a Thread object is created, the thread will be started. Once the thread is started, it will run until the thread function exits. The Thread class does not provide a method for forcing terminating the thread (something like pthread_cancel). This type of method is usually unsafe and may cause damage to user data.
#Thread::Thread explicit Thread(co::Closure* cb); template&amp;lt;typename F&amp;gt; explicit Thread(F&amp;amp;&amp;amp; f); template&amp;lt;typename F, typename P&amp;gt; Thread(F&amp;amp;&amp;amp; f, P&amp;amp;&amp;amp; p); template&amp;lt;typename F, typename T, typename P&amp;gt; Thread(F&amp;amp;&amp;amp; f, T* t, P&amp;amp;&amp;amp; p); Constructor, the thread will start after the Thread object is created.</description>
    </item>
    
    <item>
      <title>Coroutine</title>
      <link>https://coostdocs.github.io/en/co/coroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/coroutine/</guid>
      <description>include: co/co.h.
#Basic concepts Coroutines are lightweight scheduling units that run in threads. Coroutines are to threads, similar to threads to processes. There can be multiple threads in a process and multiple coroutines in a thread. The thread where the coroutine runs in is generally called the scheduling thread. The scheduling thread will suspend a coroutine, if it blocks on an I/O operation or sleep was called in the coroutine. When a coroutine is suspended, the scheduling thread will switch to other coroutines waiting to be executed.</description>
    </item>
    
    <item>
      <title>Byte order</title>
      <link>https://coostdocs.github.io/en/co/net/byte_order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/net/byte_order/</guid>
      <description>include: co/byte_order.h.
Data in the computer is stored in bytes (8 bit). Big-endian computers use big-endian byte order, that is, the high-order byte is at the lower address, and the low-order byte is at the higher address. The little-endian machine uses little-endian byte order, that is, the low-order byte is at the lower address, and the high-order byte is at the higher address.
A single byte is exactly the same on big endian and little endian machines, while the basic data types of multiple bytes have are different.</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://coostdocs.github.io/en/co/net/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/net/tcp/</guid>
      <description>include: co/tcp.h.
#tcp::Connection tcp::Connection is a simple encapsulation of TCP connection, it is designed for TCP server. When SSL is enabled in a TCP server, tcp::Connection will transfer data by SSL.
#Connection::Connection Connection(int sock); Connection(void* ssl); Connection(Connection&amp;amp;&amp;amp; c); The constructor, Connection is created by tcp::Server, users do not need to create it manually. The first version constructs a normal TCP connection, the second version constructs a TCP connection that support SSL, and the third is a move constructor.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://coostdocs.github.io/en/co/net/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/net/http/</guid>
      <description>include: co/http.h.
#http::Client http::Client is a coroutine-based http client, which is implemented based on libcurl.
#Client::Client explicit Client(const char* serv_url); Constructor, the parameter serv_url is the url address of the server, and its form is protocol://host:port, the following server urls are all ok: &amp;ldquo;github.com&amp;rdquo; &amp;ldquo;https://github.com&amp;rdquo; &amp;ldquo;http://127.0.0.1:7788&amp;rdquo; &amp;ldquo;http://[::1]:8888&amp;rdquo; Like the tcp::Client, connection is not established in the constructor. #Client::~Client Client::~Client(); Destructor, close the connection, and release libcurl related resources. #Client::add_header void add_header(const char* key, const char* val); void add_header(const char* key, int val); Add a HTTP header.</description>
    </item>
    
    <item>
      <title>RPC</title>
      <link>https://coostdocs.github.io/en/co/net/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/net/rpc/</guid>
      <description>include: co/rpc.h.
co/rpc is a high-performance RPC framework similar to grpc, it uses JSON as the data exchange format, which is different from binary protocols such as protobuf.
#rpc::Service class Service { public: Service() = default; virtual ~Service() = default; typedef std::function&amp;lt;void(Json&amp;amp;, Json&amp;amp;)&amp;gt; Fun; virtual const char* name() const = 0; virtual const co::map&amp;lt;const char*, Fun&amp;gt;&amp;amp; methods() const = 0; }; This class is a pure interface, which represents a service.</description>
    </item>
    
    <item>
      <title>Timed task scheduler</title>
      <link>https://coostdocs.github.io/en/co/tasked/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/tasked/</guid>
      <description>include: co/tasked.h.
#Tasked The Tasked class is a simple timed task scheduler. All tasks are scheduled internally by a single thread, but tasks can be added from any thread. When a task is blocked, it will affect all subsequent tasks. Therefore, it is not recommended to use Tasked to schedule tasks that may block for a long time.
#Tasked::Tasked Tasked(); Tasked(Tasked&amp;amp;&amp;amp; t); The first version is the default constructor. When the object is created, the scheduling thread will start.</description>
    </item>
    
    <item>
      <title>Random number</title>
      <link>https://coostdocs.github.io/en/co/random/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/random/</guid>
      <description>include: co/random.h.
#Random The Random class is a very fast pseudo-random number generator, which can generate integers between 1 and 2G-2 continuously and without repetition.
#Random::Random Random(); explicit Random(uint32_t seed); The default constructor uses 1 as the seed number, and the second constructor uses the parameter seed as the seed number. #Random::next uint32_t next(); Returns the next pseudo-random number, not thread safe. Once the seed number is determined, the random sequence generated by calling next() is completely determined.</description>
    </item>
    
    <item>
      <title>LruMap</title>
      <link>https://coostdocs.github.io/en/co/lrumap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/lrumap/</guid>
      <description>include: co/lru_map.h.
#LruMap template &amp;lt;typename K, typename V&amp;gt; class LruMap; LruMap is a map implemented based on the LRU (least recently used) strategy. When the number of elements in the map reaches the upper limit, the least recently used data will be replaced first. It is implemented based on std::list and std::unordered_map, and the internal elements are unordered.
#LruMap::LruMap LruMap(); explicit LruMap(size_t capacity); The default constructor uses 1024 as the maximum capacity.</description>
    </item>
    
    <item>
      <title>Hash</title>
      <link>https://coostdocs.github.io/en/co/hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/hash/</guid>
      <description>include: co/hash.h.
#Hash #hash32 uint32 hash32(const void* s, size_t n); uint32 hash32(const char* s); uint32 hash32(const fastring&amp;amp; s) uint32 hash32(const std::string&amp;amp; s); This function returns a 32-bit murmur hash value. When s is a pointer, it is generally required to be sizeof(void*) byte aligned. #hash64 uint64 hash64(const void* s, size_t n); uint64 hash64(const char* s); uint64 hash64(const fastring&amp;amp; s); uint64 hash64(const std::string&amp;amp; s); This function returns a 64-bit murmur hash value.</description>
    </item>
    
    <item>
      <title>Path</title>
      <link>https://coostdocs.github.io/en/co/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/path/</guid>
      <description>include: co/path.h.
#path co/path is ported from golang, the path separator must be &#39;/&#39; .
#path::clean() fastring clean(const fastring&amp;amp; s); Return the shortest equivalent form of the path, the consecutive separators in the path will be removed.
Example
path::clean(&amp;#34;./x//y/&amp;#34;); // return &amp;#34;x/y&amp;#34; path::clean(&amp;#34;./x/..&amp;#34;); // return &amp;#34;.&amp;#34; path::clean(&amp;#34;./x/../..&amp;#34;); // return &amp;#34;..&amp;#34; #path::join() fastring join(const fastring&amp;amp; s, const fastring&amp;amp; t); template &amp;lt;typename ...S&amp;gt; fastring join(const S&amp;amp;... s); The first version concatenates two fastrings into a complete path.</description>
    </item>
    
    <item>
      <title>File System</title>
      <link>https://coostdocs.github.io/en/co/fs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/fs/</guid>
      <description>include: co/fs.h.
co/fs.h implements common file system operations. It is recommended to use &#39;/&#39; uniformly as the path separator on different platforms.
#Metadata operations #fs::exists bool exists(const char* path); bool exists(const fastring&amp;amp; path); bool exists(const std::string&amp;amp; path); Check whether the file exists, the parameter path is path of a file or directory. #fs::fsize int64 fsize(const char* path); int64 fsize(const fastring&amp;amp; path); int64 fsize(const std::string&amp;amp; path); Get the file size. -1 will be returned if the file does not exist.</description>
    </item>
    
    <item>
      <title>Operating System</title>
      <link>https://coostdocs.github.io/en/co/os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/os/</guid>
      <description>include: co/os.h.
#os #os::cpunum int cpunum(); Returns the number of system CPU cores. #os::cwd fastring cwd(); Returns path of the current working directory. On windows, \ in the results will be converted to /. #os::daemon void daemon(); Put the current process to run in the background, for linux only. #os::env fastring env(const char* name); bool env(const char* name, const char* value); The first version, get value of the system environment variable.</description>
    </item>
    
    <item>
      <title>Compiling</title>
      <link>https://coostdocs.github.io/en/co/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/build/</guid>
      <description>#Compiler requirements The compilers required are as follows:
Linux: gcc 4.8+ Mac: clang 3.3+ Windows: vs2015+ #xmake CO recommends using xmake as the build tool.
#Install xmake For Windows, mac and debian/ubuntu, you can go directly to the release page of xmake to get the installation package. For other systems, please refer to xmake&amp;rsquo;s Installation instructions.
Xmake disables compiling as root by default on Linux. ruki says it is not safe.</description>
    </item>
    
  </channel>
</rss>
