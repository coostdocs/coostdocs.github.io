<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on Documents for Coost</title>
    <link>https://coostdocs.github.io/en/co/</link>
    <description>Recent content in Documents on Documents for Coost</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://coostdocs.github.io/en/co/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Definitions</title>
      <link>https://coostdocs.github.io/en/co/def/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/def/</guid>
      <description>include: co/def.h.
#typedefs #Fixed-length integer type co/def.h defines the following 8 types of integers:
typedef int8_t int8; typedef int16_t int16; typedef int32_t int32; typedef int64_t int64; typedef uint8_t uint8; typedef uint16_t uint16; typedef uint32_t uint32; typedef uint64_t uint64; These types have the same length on different platforms, and there is no portability problem. Google Code Style recommends not to use built-in integer types such as short, long, long long, etc.</description>
    </item>
    
    <item>
      <title>God Oriented Programming</title>
      <link>https://coostdocs.github.io/en/co/god/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/god/</guid>
      <description>include: co/god.h.
#god The god module provides some features on templates. C++ code written with templates may be hard to understand. Some C++ programmers call it god-oriented programming.
#god::bless_no_bugs void bless_no_bugs(); Pray to God to bless the code is bug-free. It is thread-safe, and can be called arbitrarily.
example
#include &amp;#34;co/god.h&amp;#34; #include &amp;#34;co/cout.h&amp;#34; int main(int argc, char** argv) { god::bless_no_bugs(); co::print(&amp;#34;hello world&amp;#34;); return 0; } #god::cast template&amp;lt;typename To, typename From&amp;gt; constexpr To cast(From&amp;amp;&amp;amp; f) { return (To) std::forward&amp;lt;From&amp;gt;(f); } Universal conversion, convert From type to To type, To can be a reference.</description>
    </item>
    
    <item>
      <title>Memory Allocation</title>
      <link>https://coostdocs.github.io/en/co/mem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/mem/</guid>
      <description>include: co/mem.h.
#co::alloc 1. void* alloc(size_t size); 2. void* alloc(size_t size, size_t align); 1, allocate size bytes of memory. 2, allocate size bytes of memory, and the memory boundary is align byte-aligned (align &amp;lt;= 1024). In the 2nd, align must be power of 2 and cannot exceed 1024. #co::free void free(void* p, size_t size); Free memory allocated by co::alloc or co::realloc, where size is the size of the allocated memory. co::free is different from the ::free provided by the system, it needs an additional size parameter.</description>
    </item>
    
    <item>
      <title>flag</title>
      <link>https://coostdocs.github.io/en/co/flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/flag/</guid>
      <description>include: co/flag.h.
#Basic concepts co.flag is a command line and config file parsing library. Its principle is very simple, define global variables in code, then parse the command line parameters and/or config file when the program starts, and update the value of these global variables.
#flag variable The global variable defined by macros in co.flag are called flag variable. For example, the following code defines a flag variable, the variable name is FLG_x.</description>
    </item>
    
    <item>
      <title>log</title>
      <link>https://coostdocs.github.io/en/co/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/log/</guid>
      <description>include: co/log.h.
#Introduction co.log is a high-performance log library provided by coost. It supports two types of logs, level log and topic log (TLOG). It prints logs as follows:
LOG &amp;lt;&amp;lt; &amp;#34;hello world&amp;#34; &amp;lt;&amp;lt; 23; // level log TLOG(&amp;#34;topic&amp;#34;) &amp;lt;&amp;lt; &amp;#34;hello&amp;#34; &amp;lt;&amp;lt; 23; // topic log #Level Log Level log is divided into 5 levels: debug, info, warning, error, fatal, and provides a series of macros to print logs of different levels.</description>
    </item>
    
    <item>
      <title>Unitest</title>
      <link>https://coostdocs.github.io/en/co/unitest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/unitest/</guid>
      <description>include: co/unitest.h.
#Basic concepts co.unitest is a unit testing framework, similar to google gtest, but easier to use.
#Test Units and Test Cases A test program can be divided into multiple test units according to functions or modules, and there can be multiple test cases under each test unit. For example, a test unit can be defined for a class (or module) in C++, and a test case can be defined for each method in the class (or module).</description>
    </item>
    
    <item>
      <title>Benchmark</title>
      <link>https://coostdocs.github.io/en/co/benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/benchmark/</guid>
      <description>include: co/benchmark.h.
#basic concept co.benchmark is a benchmark framework added in v3.0.1, which can be used for performance benchmarking.
#BM_group #define BM_group(_name_) \ ......\ void _co_bm_group_##_name_(bm::xx::Group&amp;amp; _g_) The BM_group macro is used to define a benchmark group, which actually defines a function. Multiple benchmarks can be defined with BM_add in each group. The parameter _name_ is the group name, which is also part of name of the defined function. BM_group(atomic) is ok, but BM_group(co.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://coostdocs.github.io/en/co/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/json/</guid>
      <description>include: co/json.h.
co.json is a JSON library similar to rapidjson. Compared with rapidjson, it has better performance and is easier to use.
#Basic concepts JSON is a simple data format that supports two data structures:
A collection consisting of a series of key/value pairs. This type of structure is called object, which corresponds to struct, map, etc, in programming languages. A list composed of a series of value, this kind of structure is called array, which corresponds to vector, list, etc, in programming languages.</description>
    </item>
    
    <item>
      <title>Compiling</title>
      <link>https://coostdocs.github.io/en/co/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coostdocs.github.io/en/co/build/</guid>
      <description>#Compiler requirements The compilers required are as follows:
Linux: gcc 4.8+ Mac: clang 3.3+ Windows: vs2015+ #xmake Coost recommends using xmake as the build tool.
#Install xmake For Windows, mac and debian/ubuntu, you can go directly to the release page of xmake to get the installation package. For other systems, please refer to xmake&amp;rsquo;s Installation instructions.
#Build Run commands below in the root directory of co to build libco and other projects:</description>
    </item>
    
  </channel>
</rss>
